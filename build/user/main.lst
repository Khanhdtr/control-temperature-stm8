                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TIM4_UPD_OVF_IRQHandler
                                     13 	.globl _Printf
                                     14 	.globl _SetupSerialPort
                                     15 	.globl _TIMER_CheckTimeMS
                                     16 	.globl _TIMER_InitTime
                                     17 	.globl _TIMER_Inc
                                     18 	.globl _TIMER_Init
                                     19 	.globl _TIM4_ClearITPendingBit
                                     20 	.globl _I2C_Cmd
                                     21 	.globl _I2C_Init
                                     22 	.globl _I2C_DeInit
                                     23 	.globl _GPIO_WriteLow
                                     24 	.globl _GPIO_WriteHigh
                                     25 	.globl _GPIO_Init
                                     26 	.globl _CLK_GetFlagStatus
                                     27 	.globl _CLK_GetClockFreq
                                     28 	.globl _CLK_SYSCLKConfig
                                     29 	.globl _CLK_HSIPrescalerConfig
                                     30 	.globl _CLK_ClockSwitchConfig
                                     31 	.globl _CLK_PeripheralClockConfig
                                     32 	.globl _CLK_ClockSwitchCmd
                                     33 	.globl _CLK_LSICmd
                                     34 	.globl _CLK_HSICmd
                                     35 	.globl _CLK_HSECmd
                                     36 	.globl _CLK_DeInit
                                     37 	.globl _ToggleVar
                                     38 	.globl _tick
                                     39 	.globl _clock_setup
                                     40 	.globl _I2C_setup
                                     41 	.globl _GPIO_setup
                                     42 	.globl _Led_manager
                                     43 ;--------------------------------------------------------
                                     44 ; ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DATA
      000000                         47 _tick::
      000000                         48 	.ds 6
                                     49 ;--------------------------------------------------------
                                     50 ; ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area INITIALIZED
      000000                         53 _ToggleVar::
      000000                         54 	.ds 1
                                     55 ;--------------------------------------------------------
                                     56 ; Stack segment in internal ram 
                                     57 ;--------------------------------------------------------
                                     58 	.area	SSEG
      000000                         59 __start__stack:
      000000                         60 	.ds	1
                                     61 
                                     62 ;--------------------------------------------------------
                                     63 ; absolute external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area DABS (ABS)
                                     66 ;--------------------------------------------------------
                                     67 ; interrupt vector 
                                     68 ;--------------------------------------------------------
                                     69 	.area HOME
      000000                         70 __interrupt_vect:
      000000 82v00u00u00             71 	int s_GSINIT ;reset
      000004 82 00 00 00             72 	int 0x0000 ;trap
      000008 82 00 00 00             73 	int 0x0000 ;int0
      00000C 82 00 00 00             74 	int 0x0000 ;int1
      000010 82 00 00 00             75 	int 0x0000 ;int2
      000014 82 00 00 00             76 	int 0x0000 ;int3
      000018 82 00 00 00             77 	int 0x0000 ;int4
      00001C 82 00 00 00             78 	int 0x0000 ;int5
      000020 82 00 00 00             79 	int 0x0000 ;int6
      000024 82 00 00 00             80 	int 0x0000 ;int7
      000028 82 00 00 00             81 	int 0x0000 ;int8
      00002C 82 00 00 00             82 	int 0x0000 ;int9
      000030 82 00 00 00             83 	int 0x0000 ;int10
      000034 82 00 00 00             84 	int 0x0000 ;int11
      000038 82 00 00 00             85 	int 0x0000 ;int12
      00003C 82 00 00 00             86 	int 0x0000 ;int13
      000040 82 00 00 00             87 	int 0x0000 ;int14
      000044 82 00 00 00             88 	int 0x0000 ;int15
      000048 82 00 00 00             89 	int 0x0000 ;int16
      00004C 82 00 00 00             90 	int 0x0000 ;int17
      000050 82 00 00 00             91 	int 0x0000 ;int18
      000054 82 00 00 00             92 	int 0x0000 ;int19
      000058 82 00 00 00             93 	int 0x0000 ;int20
      00005C 82 00 00 00             94 	int 0x0000 ;int21
      000060 82 00 00 00             95 	int 0x0000 ;int22
      000064 82v00u00u80             96 	int _TIM4_UPD_OVF_IRQHandler ;int23
      000068 82 00 00 00             97 	int 0x0000 ;int24
      00006C 82 00 00 00             98 	int 0x0000 ;int25
      000070 82 00 00 00             99 	int 0x0000 ;int26
      000074 82 00 00 00            100 	int 0x0000 ;int27
      000078 82 00 00 00            101 	int 0x0000 ;int28
      00007C 82 00 00 00            102 	int 0x0000 ;int29
                                    103 ;--------------------------------------------------------
                                    104 ; global & static initialisations
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME
                                    107 	.area GSINIT
                                    108 	.area GSFINAL
                                    109 	.area GSINIT
      000000                        110 __sdcc_gs_init_startup:
      000000                        111 __sdcc_init_data:
                                    112 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  113 	ldw x, #l_DATA
      000003 27 07            [ 1]  114 	jreq	00002$
      000005                        115 00001$:
      000005 72 4FuFFuFF      [ 1]  116 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  117 	decw x
      00000A 26 F9            [ 1]  118 	jrne	00001$
      00000C                        119 00002$:
      00000C AEr00r00         [ 2]  120 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  121 	jreq	00004$
      000011                        122 00003$:
      000011 D6uFFuFF         [ 1]  123 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  124 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  125 	decw	x
      000018 26 F7            [ 1]  126 	jrne	00003$
      00001A                        127 00004$:
                                    128 ; stm8_genXINIT() end
                                    129 	.area GSFINAL
      000000 CCr00r80         [ 2]  130 	jp	__sdcc_program_startup
                                    131 ;--------------------------------------------------------
                                    132 ; Home
                                    133 ;--------------------------------------------------------
                                    134 	.area HOME
                                    135 	.area HOME
      000080                        136 __sdcc_program_startup:
      000080 CCr01r23         [ 2]  137 	jp	_main
                                    138 ;	return from main will return to caller
                                    139 ;--------------------------------------------------------
                                    140 ; code
                                    141 ;--------------------------------------------------------
                                    142 	.area CODE
                                    143 ;	user/main.c: 27: void clock_setup(void)
                                    144 ;	-----------------------------------------
                                    145 ;	 function clock_setup
                                    146 ;	-----------------------------------------
      000000                        147 _clock_setup:
                                    148 ;	user/main.c: 29: CLK_DeInit();
      000000 CDr00r00         [ 4]  149 	call	_CLK_DeInit
                                    150 ;	user/main.c: 30: CLK_HSECmd(DISABLE);
      000003 4B 00            [ 1]  151 	push	#0x00
      000005 CDr00r00         [ 4]  152 	call	_CLK_HSECmd
      000008 84               [ 1]  153 	pop	a
                                    154 ;	user/main.c: 31: CLK_LSICmd(DISABLE);
      000009 4B 00            [ 1]  155 	push	#0x00
      00000B CDr00r00         [ 4]  156 	call	_CLK_LSICmd
      00000E 84               [ 1]  157 	pop	a
                                    158 ;	user/main.c: 32: CLK_HSICmd(ENABLE);
      00000F 4B 01            [ 1]  159 	push	#0x01
      000011 CDr00r00         [ 4]  160 	call	_CLK_HSICmd
      000014 84               [ 1]  161 	pop	a
                                    162 ;	user/main.c: 33: while(CLK_GetFlagStatus(CLK_FLAG_HSIRDY) == FALSE);
      000015                        163 00101$:
      000015 4B 02            [ 1]  164 	push	#0x02
      000017 4B 01            [ 1]  165 	push	#0x01
      000019 CDr00r00         [ 4]  166 	call	_CLK_GetFlagStatus
      00001C 85               [ 2]  167 	popw	x
      00001D 4D               [ 1]  168 	tnz	a
      00001E 27 F5            [ 1]  169 	jreq	00101$
                                    170 ;	user/main.c: 34: CLK_ClockSwitchCmd(ENABLE);
      000020 4B 01            [ 1]  171 	push	#0x01
      000022 CDr00r00         [ 4]  172 	call	_CLK_ClockSwitchCmd
      000025 84               [ 1]  173 	pop	a
                                    174 ;	user/main.c: 36: CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
      000026 4B 00            [ 1]  175 	push	#0x00
      000028 CDr00r00         [ 4]  176 	call	_CLK_HSIPrescalerConfig
      00002B 84               [ 1]  177 	pop	a
                                    178 ;	user/main.c: 39: CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1 );
      00002C 4B 80            [ 1]  179 	push	#0x80
      00002E CDr00r00         [ 4]  180 	call	_CLK_SYSCLKConfig
      000031 84               [ 1]  181 	pop	a
                                    182 ;	user/main.c: 40: CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO, CLK_SOURCE_HSI, DISABLE, CLK_CURRENTCLOCKSTATE_ENABLE);
      000032 4B 01            [ 1]  183 	push	#0x01
      000034 4B 00            [ 1]  184 	push	#0x00
      000036 4B E1            [ 1]  185 	push	#0xe1
      000038 4B 01            [ 1]  186 	push	#0x01
      00003A CDr00r00         [ 4]  187 	call	_CLK_ClockSwitchConfig
      00003D 5B 04            [ 2]  188 	addw	sp, #4
                                    189 ;	user/main.c: 42: CLK_PeripheralClockConfig(CLK_PERIPHERAL_SPI, DISABLE);
      00003F 4B 00            [ 1]  190 	push	#0x00
      000041 4B 01            [ 1]  191 	push	#0x01
      000043 CDr00r00         [ 4]  192 	call	_CLK_PeripheralClockConfig
      000046 85               [ 2]  193 	popw	x
                                    194 ;	user/main.c: 43: CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C, ENABLE);
      000047 4B 01            [ 1]  195 	push	#0x01
      000049 4B 00            [ 1]  196 	push	#0x00
      00004B CDr00r00         [ 4]  197 	call	_CLK_PeripheralClockConfig
      00004E 85               [ 2]  198 	popw	x
                                    199 ;	user/main.c: 44: CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC, DISABLE);
      00004F 4B 00            [ 1]  200 	push	#0x00
      000051 4B 13            [ 1]  201 	push	#0x13
      000053 CDr00r00         [ 4]  202 	call	_CLK_PeripheralClockConfig
      000056 85               [ 2]  203 	popw	x
                                    204 ;	user/main.c: 45: CLK_PeripheralClockConfig(CLK_PERIPHERAL_AWU, DISABLE);
      000057 4B 00            [ 1]  205 	push	#0x00
      000059 4B 12            [ 1]  206 	push	#0x12
      00005B CDr00r00         [ 4]  207 	call	_CLK_PeripheralClockConfig
      00005E 85               [ 2]  208 	popw	x
                                    209 ;	user/main.c: 46: CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART1, DISABLE);
      00005F 4B 00            [ 1]  210 	push	#0x00
      000061 4B 03            [ 1]  211 	push	#0x03
      000063 CDr00r00         [ 4]  212 	call	_CLK_PeripheralClockConfig
      000066 85               [ 2]  213 	popw	x
                                    214 ;	user/main.c: 47: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER1, DISABLE);
      000067 4B 00            [ 1]  215 	push	#0x00
      000069 4B 07            [ 1]  216 	push	#0x07
      00006B CDr00r00         [ 4]  217 	call	_CLK_PeripheralClockConfig
      00006E 85               [ 2]  218 	popw	x
                                    219 ;	user/main.c: 48: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2, DISABLE);
      00006F 4B 00            [ 1]  220 	push	#0x00
      000071 4B 05            [ 1]  221 	push	#0x05
      000073 CDr00r00         [ 4]  222 	call	_CLK_PeripheralClockConfig
      000076 85               [ 2]  223 	popw	x
                                    224 ;	user/main.c: 49: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER4, ENABLE);
      000077 4B 01            [ 1]  225 	push	#0x01
      000079 4B 04            [ 1]  226 	push	#0x04
      00007B CDr00r00         [ 4]  227 	call	_CLK_PeripheralClockConfig
      00007E 85               [ 2]  228 	popw	x
      00007F 81               [ 4]  229 	ret
                                    230 ;	user/main.c: 52: INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
                                    231 ;	-----------------------------------------
                                    232 ;	 function TIM4_UPD_OVF_IRQHandler
                                    233 ;	-----------------------------------------
      000080                        234 _TIM4_UPD_OVF_IRQHandler:
      000080 62               [ 2]  235 	div	x, a
                                    236 ;	user/main.c: 54: TIM4_ClearITPendingBit(TIM4_IT_UPDATE);
      000081 4B 01            [ 1]  237 	push	#0x01
      000083 CDr00r00         [ 4]  238 	call	_TIM4_ClearITPendingBit
      000086 84               [ 1]  239 	pop	a
                                    240 ;	user/main.c: 55: TIMER_Inc();
      000087 CDr00r00         [ 4]  241 	call	_TIMER_Inc
      00008A 80               [11]  242 	iret
                                    243 ;	user/main.c: 59: void I2C_setup(void)
                                    244 ;	-----------------------------------------
                                    245 ;	 function I2C_setup
                                    246 ;	-----------------------------------------
      00008B                        247 _I2C_setup:
                                    248 ;	user/main.c: 61: I2C_DeInit();
      00008B CDr00r00         [ 4]  249 	call	_I2C_DeInit
                                    250 ;	user/main.c: 67: (CLK_GetClockFreq() / 1000000));
      00008E CDr00r00         [ 4]  251 	call	_CLK_GetClockFreq
      000091 4B 40            [ 1]  252 	push	#0x40
      000093 4B 42            [ 1]  253 	push	#0x42
      000095 4B 0F            [ 1]  254 	push	#0x0f
      000097 4B 00            [ 1]  255 	push	#0x00
      000099 89               [ 2]  256 	pushw	x
      00009A 90 89            [ 2]  257 	pushw	y
      00009C CDr00r00         [ 4]  258 	call	__divulong
      00009F 5B 08            [ 2]  259 	addw	sp, #8
      0000A1 9F               [ 1]  260 	ld	a, xl
                                    261 ;	user/main.c: 62: I2C_Init(100000, 
      0000A2 88               [ 1]  262 	push	a
      0000A3 4B 00            [ 1]  263 	push	#0x00
      0000A5 4B 01            [ 1]  264 	push	#0x01
      0000A7 4B 00            [ 1]  265 	push	#0x00
      0000A9 4B 46            [ 1]  266 	push	#0x46
      0000AB 4B 00            [ 1]  267 	push	#0x00
      0000AD 4B A0            [ 1]  268 	push	#0xa0
      0000AF 4B 86            [ 1]  269 	push	#0x86
      0000B1 4B 01            [ 1]  270 	push	#0x01
      0000B3 4B 00            [ 1]  271 	push	#0x00
      0000B5 CDr00r00         [ 4]  272 	call	_I2C_Init
      0000B8 5B 0A            [ 2]  273 	addw	sp, #10
                                    274 ;	user/main.c: 68: I2C_Cmd(ENABLE);
      0000BA 4B 01            [ 1]  275 	push	#0x01
      0000BC CDr00r00         [ 4]  276 	call	_I2C_Cmd
      0000BF 84               [ 1]  277 	pop	a
      0000C0 81               [ 4]  278 	ret
                                    279 ;	user/main.c: 71: void GPIO_setup(void)
                                    280 ;	-----------------------------------------
                                    281 ;	 function GPIO_setup
                                    282 ;	-----------------------------------------
      0000C1                        283 _GPIO_setup:
                                    284 ;	user/main.c: 73: GPIO_Init(GPIOB, GPIO_PIN_4, GPIO_MODE_OUT_OD_HIZ_FAST);
      0000C1 4B B0            [ 1]  285 	push	#0xb0
      0000C3 4B 10            [ 1]  286 	push	#0x10
      0000C5 4B 05            [ 1]  287 	push	#0x05
      0000C7 4B 50            [ 1]  288 	push	#0x50
      0000C9 CDr00r00         [ 4]  289 	call	_GPIO_Init
      0000CC 5B 04            [ 2]  290 	addw	sp, #4
                                    291 ;	user/main.c: 74: GPIO_Init(GPIOB, GPIO_PIN_5, GPIO_MODE_OUT_OD_HIZ_FAST);
      0000CE 4B B0            [ 1]  292 	push	#0xb0
      0000D0 4B 20            [ 1]  293 	push	#0x20
      0000D2 4B 05            [ 1]  294 	push	#0x05
      0000D4 4B 50            [ 1]  295 	push	#0x50
      0000D6 CDr00r00         [ 4]  296 	call	_GPIO_Init
      0000D9 5B 04            [ 2]  297 	addw	sp, #4
                                    298 ;	user/main.c: 75: GPIO_Init(GPIOA,GPIO_PIN_1,GPIO_MODE_OUT_PP_LOW_SLOW);
      0000DB 4B C0            [ 1]  299 	push	#0xc0
      0000DD 4B 02            [ 1]  300 	push	#0x02
      0000DF 4B 00            [ 1]  301 	push	#0x00
      0000E1 4B 50            [ 1]  302 	push	#0x50
      0000E3 CDr00r00         [ 4]  303 	call	_GPIO_Init
      0000E6 5B 04            [ 2]  304 	addw	sp, #4
      0000E8 81               [ 4]  305 	ret
                                    306 ;	user/main.c: 95: void Led_manager (void)
                                    307 ;	-----------------------------------------
                                    308 ;	 function Led_manager
                                    309 ;	-----------------------------------------
      0000E9                        310 _Led_manager:
                                    311 ;	user/main.c: 97: if(TIMER_CheckTimeMS(&tick, 1000) == 0) ToggleVar = ~ToggleVar;  
      0000E9 AEr00r00         [ 2]  312 	ldw	x, #_tick+0
      0000EC 4B E8            [ 1]  313 	push	#0xe8
      0000EE 4B 03            [ 1]  314 	push	#0x03
      0000F0 4B 00            [ 1]  315 	push	#0x00
      0000F2 4B 00            [ 1]  316 	push	#0x00
      0000F4 89               [ 2]  317 	pushw	x
      0000F5 CDr00r00         [ 4]  318 	call	_TIMER_CheckTimeMS
      0000F8 5B 06            [ 2]  319 	addw	sp, #6
      0000FA 4D               [ 1]  320 	tnz	a
      0000FB 26 07            [ 1]  321 	jrne	00102$
      0000FD C6u00u00         [ 1]  322 	ld	a, _ToggleVar+0
      000100 43               [ 1]  323 	cpl	a
      000101 C7u00u00         [ 1]  324 	ld	_ToggleVar+0, a
      000104                        325 00102$:
                                    326 ;	user/main.c: 98: if(ToggleVar == 0x01)   
      000104 C6u00u00         [ 1]  327 	ld	a, _ToggleVar+0
      000107 A1 01            [ 1]  328 	cp	a, #0x01
      000109 26 0C            [ 1]  329 	jrne	00104$
                                    330 ;	user/main.c: 99: GPIO_WriteHigh(GPIOA,GPIO_PIN_1);   
      00010B 4B 02            [ 1]  331 	push	#0x02
      00010D 4B 00            [ 1]  332 	push	#0x00
      00010F 4B 50            [ 1]  333 	push	#0x50
      000111 CDr00r00         [ 4]  334 	call	_GPIO_WriteHigh
      000114 5B 03            [ 2]  335 	addw	sp, #3
      000116 81               [ 4]  336 	ret
      000117                        337 00104$:
                                    338 ;	user/main.c: 101: GPIO_WriteLow(GPIOA,GPIO_PIN_1);
      000117 4B 02            [ 1]  339 	push	#0x02
      000119 4B 00            [ 1]  340 	push	#0x00
      00011B 4B 50            [ 1]  341 	push	#0x50
      00011D CDr00r00         [ 4]  342 	call	_GPIO_WriteLow
      000120 5B 03            [ 2]  343 	addw	sp, #3
      000122 81               [ 4]  344 	ret
                                    345 ;	user/main.c: 105: void main() 
                                    346 ;	-----------------------------------------
                                    347 ;	 function main
                                    348 ;	-----------------------------------------
      000123                        349 _main:
                                    350 ;	user/main.c: 109: clock_setup();
      000123 CDr00r00         [ 4]  351 	call	_clock_setup
                                    352 ;	user/main.c: 110: GPIO_setup();
      000126 CDr00rC1         [ 4]  353 	call	_GPIO_setup
                                    354 ;	user/main.c: 113: TIMER_Init();
      000129 CDr00r00         [ 4]  355 	call	_TIMER_Init
                                    356 ;	user/main.c: 114: SetupSerialPort();
      00012C CDr00r00         [ 4]  357 	call	_SetupSerialPort
                                    358 ;	user/main.c: 116: enableInterrupts();
      00012F 9A               [ 1]  359 	rim
                                    360 ;	user/main.c: 117: TIMER_InitTime(&tick);
      000130 AEr00r00         [ 2]  361 	ldw	x, #_tick+0
      000133 89               [ 2]  362 	pushw	x
      000134 CDr00r00         [ 4]  363 	call	_TIMER_InitTime
      000137 85               [ 2]  364 	popw	x
                                    365 ;	user/main.c: 118: while(1)
      000138                        366 00102$:
                                    367 ;	user/main.c: 120: Led_manager ();
      000138 CDr00rE9         [ 4]  368 	call	_Led_manager
                                    369 ;	user/main.c: 121: Printf("Hello from my program");
      00013B AEr01r46         [ 2]  370 	ldw	x, #___str_0+0
      00013E 89               [ 2]  371 	pushw	x
      00013F CDr00r00         [ 4]  372 	call	_Printf
      000142 85               [ 2]  373 	popw	x
      000143 20 F3            [ 2]  374 	jra	00102$
      000145 81               [ 4]  375 	ret
                                    376 	.area CODE
      000146                        377 ___str_0:
      000146 48 65 6C 6C 6F 20 66   378 	.ascii "Hello from my program"
             72 6F 6D 20 6D 79 20
             70 72 6F 67 72 61 6D
      00015B 00                     379 	.db 0x00
                                    380 	.area INITIALIZER
      000000                        381 __xinit__ToggleVar:
      000000 01                     382 	.db #0x01	; 1
                                    383 	.area CABS (ABS)
